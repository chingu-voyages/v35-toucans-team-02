{"version":3,"sources":["Hooks/fetchMovies.js","Components/Movie.js","Components/Results.js","Components/Search.js","App.js","index.js"],"names":["ACTIONS","reducer","state","action","type","loading","movies","payload","error","Movie","movie","movieId","useState","streaming","setStreaming","console","log","STREAMING_API_KEY","process","AVAILABILITY_OPTIONS","method","url","params","country","imdb_id","output_language","headers","fetchStreaming","a","axios","request","then","res","data","streamingInfo","Object","keys","catch","err","className","style","width","border","objectFit","src","Poster","alt","height","fontSize","fontWeight","Title","Year","Rated","Genre","imdbRating","onClick","length","map","platform","i","Released","Runtime","Director","Actors","Language","Country","BoxOffice","Results","useReducer","dispatch","OMDB_SECOND_URL","useEffect","cancelToken1","CancelToken","source","get","cancelToken","token","isCancel","cancel","fetchMovies","imdbID","Search","search","setSearch","setMovieId","getId","onChange","e","target","value","onKeyDown","key","placeholder","background","sz","id","App","Container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83e23f78.chunk.js","sourcesContent":["import {useReducer, useEffect} from 'react';\nimport axios from 'axios';\n\n// constants for switch case in reducer\nconst ACTIONS = {\n    GET: \"GET\",\n    GET_DATA: \"get-data\",\n    ERROR: \"error\"\n}\n\n//sets up the actions for the 2nd API call which brings in most of the movie data\nfunction reducer(state, action) {\n    switch(action.type){\n        case ACTIONS.GET:\n            return {loading: true, movies: []};\n            \n        case ACTIONS.GET_DATA:\n        return {...state, loading: false, movies: action.payload.movies}\n        \n        case ACTIONS.ERROR:\n        return {...state, loading: false, error: action.payload.error, movies: []};\n        \n        default: return state\n    }\n}\n// This hook will be used after the movieId comes back from the first API call:\nexport default function FetchMovies(movieId) {\n    const [state, dispatch] = useReducer(reducer, {movies: [], loading: true});\n    \n    console.log(movieId)\n\n    \n//Endpoint for OMDB API with movieId variable;\nconst OMDB_SECOND_URL = `https://www.omdbapi.com/?i=${movieId}&apikey=${process.env.REACT_APP_OMDB_API_KEY}`\n\n// useEffect hook is called whenever the movieId changes from new searches\n    useEffect(() => {\n        const cancelToken1 = axios.CancelToken.source();\n        dispatch({type: ACTIONS.GET})\n        axios.get(OMDB_SECOND_URL, {\n            cancelToken: cancelToken1.token,\n            movieId: {movieId}\n        }).then(res => {\n            dispatch({type: ACTIONS.GET_DATA, payload: {movies: [res.data]}})\n        }).catch(err => {\n            if(axios.isCancel(err)) return \n            dispatch({type: ACTIONS.ERROR, payload: {error: err}})\n        })\n        return () => {\n            cancelToken1.cancel();\n        }\n    }, [movieId])\n\n    return state // state is 'movies'\n}\n","import {useState} from 'react'\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from 'axios';\n\n\n\n\n// this is the component for every individual movie result card\nexport default function Movie({movie, movieId}) {\n    const [streaming, setStreaming] = useState([]);\n\n    console.log(movieId)\n\n    // 3rd API call to fetch streaming availability with movie ID\n    const STREAMING_API_KEY = `${process.env.REACT_APP_STREAMING_API_KEY}`\n\n    const AVAILABILITY_OPTIONS = {\n        method: 'GET',\n        url: 'https://streaming-availability.p.rapidapi.com/get/basic',\n        params: {\n            country: 'us', \n            imdb_id: movieId, \n            output_language: 'en'\n        },\n        headers: {\n          'x-rapidapi-host': 'streaming-availability.p.rapidapi.com',\n          'x-rapidapi-key': STREAMING_API_KEY\n        }\n    }\n    //API call when user clicks button to check availability:\n    const fetchStreaming = async () => {\n        await axios.request(AVAILABILITY_OPTIONS, {movieId: {movieId}})\n        .then(res => {\n            console.log(res.data.streamingInfo);\n            \n            setStreaming([res.data.streamingInfo]);\n            console.log(streaming[0])\n            console.log(Object.keys(streaming[0]));\n            \n            \n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n        //\"Movie Card\" structure is rendered here: \n    return (\n        \n        <div className=\"card m-1\" style={{width: \"20vw\", border: \"1px solid black\"}}>\n            <div style={{width: \"100%\", objectFit: \"contain\"}}>\n           <img className=\"card-img-top img-responsive\" src={movie.Poster} alt=\"movie poster\" style={{height: \"40vh\", width: \"20vw\"}}/>\n           </div>\n           <div className=\"card-body mt-2\" style={{fontSize: \"0.7rem\", height: \"20vh\"}}>\n            \n                <p className=\"card-title\" style={{fontSize: \"0.8rem\", fontWeight: \"bold\"}}>{movie.Title}({movie.Year})</p>\n                <p>Rated {movie.Rated}</p>\n          <p>{movie.Genre}</p>\n          <p>IMDb Rating: {movie.imdbRating} / 10</p>\n          </div>\n          <div className=\"card-body\">\n           <button onClick={fetchStreaming}>check for streaming</button>\n           <p>{streaming.length > 0 ? Object.keys(streaming[0]).map((platform, i) => (\n               <ul key={i}>\n                <li>{platform}</li>   \n               </ul>\n           )) : \"\"}</p>   \n          </div>\n          <div className=\"card-body\" style={{height: \"40vh\", fontSize: \"0.7rem\"}}>\n              <ul>\n                 <li>Released: {movie.Released}</li>\n                 <li>Runtime: {movie.Runtime}</li>  \n                 <li>Director: {movie.Director}</li> \n                 <li>Actors: {movie.Actors}</li> \n                 <li>Language: {movie.Language}</li>\n                 <li>Country: {movie.Country}</li>\n                 <li>Box Office: {movie.BoxOffice}</li> \n             </ul>  \n               \n            \n\n           </div>\n               \n           \n        </div>\n        \n    )\n}\n","import React from 'react';\nimport '../index.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport fetchMovies from '../Hooks/fetchMovies';\nimport Movie from './Movie';\n\n\n//this component houses all of the movie responses from the search\nexport default function Results({movieId}) {\n    const {movies, loading, error} = fetchMovies(movieId);\n    console.log(movies)\n\n\n\n    // Individual Movie Cards are mapped and rendered here:\n    return (\n        <div>\n         {loading && <h1>Loading...</h1>}\n         {error && <h1>Error</h1>}\n         \n         {movies.length > 0 ? movies.map(movie => {\n             return <Movie key={movie.imdbID} \n             movie={movie} \n            \n             movieId={movieId}\n             />\n         }) : \"\"}\n         \n        </div>\n    )\n}\n","import {useEffect} from 'react';\nimport Results from './Results';\nimport axios from 'axios';\n\nexport default function Search({search, setSearch, movieId, setMovieId}) {\n \n\n  // This can automatically load a search when the page first loads:\n  useEffect(() => {\n    getId();\n  }, [])\n\n  // First API Call retrieves IMDB ID (needed to call other APIs)\n  const getId = async () => {\n    await axios.get(`https://www.omdbapi.com/?s=${search}&apikey=${process.env.REACT_APP_OMDB_API_KEY}&plot=full`).then((res) => {\n      console.log(res.data.Search);\n      setMovieId(res.data.Search || []);\n      console.log(movieId)\n    })\n  }\n   \n // onSearch and KeyDown are triggered by search button or clicking enter to initiate API call \n  const onSearch = () => {\n    console.log(search)\n    getId();\n  }\n  \n  const onKeyDown = (e) => {\n    if(e.key === \"Enter\") getId();\n  }\n\n  //Search Bar and Results component rendered here:\n    return (\n        <div className=\"d-flex flex-column align-items-center\">\n         \n           <div>\n           \n           <input className=\"m-2\" onChange={e => {setSearch(e.target.value)}} value={search} onKeyDown={onKeyDown} type=\"text\" placeholder=\"Enter A Movie Title\" style={{width: \"50vw\"}}/> \n           \n           <button style={{background: \"maroon\"}} sz=\"sm\" onClick={onSearch} onChange={() => {setSearch(\"\")}}>\n            Search\n          </button>\n           </div>\n          <div id=\"results\">\n          {movieId.length > 0 ? \n       (movieId.map(movie => (\n       <Results movieId={movie.imdbID} key={movie.imdbID}/>\n       ))) : (\n         \"\"\n       )}\n       </div>\n          </div> \n        \n    )\n}","import {useState} from 'react';\nimport Search from './Components/Search';\nimport {Container} from 'react-bootstrap';\n\n\nfunction App() {\n  // Search and movie ID held in state in main APP for use in other components\n  const [search, setSearch] = useState('batman'); // <-- initial search when loaded\n  const [movieId, setMovieId] = useState([]) \n  \n  \n  \n  \n\n  return (\n    <Container>\n      <Search search={search}\n      setSearch={setSearch}\n      movieId={movieId}\n      setMovieId={setMovieId}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}